pipeline {
  agent {
    docker {
      image 'saikanth9010/maven-java17-agent:v2'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }

  environment {
    RECIPIENT = 'saikanth9010@gmail.com'  // change to your actual email
  }
  
  stages {
  //   stage('Clean Workspace') {
  //     steps {
  //       deleteDir() // Cleans the workspace entirely
  //     }
  //   }

    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://20.168.216.205:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "saikanth9010/jenkinsci-argocd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('Docker')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "Docker") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "JenkinsCI-ArgoCD"
            GIT_USER_NAME = "saikanth9010"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "saikanth9010@gmail.com"
                    git config user.name "Saikanth Reddy"
                    git pull origin main --rebase
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main --force
                '''
            }
        }
    }
  }

  post {
    success {
      emailext(
        subject: "✅ Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
          <p>Jenkins Pipeline Build <strong>SUCCEEDED</strong></p>
          <ul>
            <li><strong>Job:</strong> ${env.JOB_NAME}</li>
            <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
            <li><strong>Status:</strong> SUCCESS</li>
            <li><a href='${env.BUILD_URL}'>View Build</a></li>
          </ul>
        """,
        to: "${RECIPIENT}",
        mimeType: 'text/html'
      )
    }

    failure {
      emailext(
        subject: "❌ Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
          <p>Jenkins Pipeline Build <strong>FAILED</strong></p>
          <ul>
            <li><strong>Job:</strong> ${env.JOB_NAME}</li>
            <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
            <li><strong>Status:</strong> FAILURE</li>
            <li><a href='${env.BUILD_URL}'>View Build Logs</a></li>
          </ul>
        """,
        to: "${RECIPIENT}",
        mimeType: 'text/html'
      )
    }
  }

}

